{"version":3,"sources":["Calculator.js","serviceWorker.js","index.js"],"names":["Calculator","react_default","a","createElement","className","this","props","display","onClick","Clear","handleClick","Component","MathHandler","_this","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","state","displayValue","funcValue","bind","assertThisInitialized","Equal","Equals","indexOf","interValue","split","setState","parseInt","event","length","target","classList","Calculator_Calculator","Boolean","window","location","hostname","match","ReactDOM","render","src_Calculator_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.2ceb23c9.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport './Calculator.css';\n\n\n\nclass Calculator extends Component {\n  \n  render(){\n    return(\n    <div className=\"calculator\">\n        <div className =\"display\">\n          <div className=\"numbers\">{this.props.display}</div>\n        </div>\n        <div className =\"keys\">\n          <p>\n            <button className = \"undo\">↶</button>\n            <button className = \"redo\">↷</button>\n            <button className = \"ac\" onClick={this.props.Clear}>AC</button>\n            <button className = \"/\" onClick={this.props.handleClick}>/</button>\n          </p>\n          <p>\n            <button className = \"7\" onClick={this.props.handleClick}>7</button>\n            <button className = \"8\" onClick={this.props.handleClick}>8</button>\n            <button className = \"9\" onClick={this.props.handleClick}>9</button>\n            <button className = \"*\" onClick={this.props.handleClick}>*</button>\n          </p>\n          <p>\n            <button className = \"4\" onClick={this.props.handleClick}>4</button>\n            <button className = \"5\" onClick={this.props.handleClick}>5</button>\n            <button className = \"6\" onClick={this.props.handleClick}>6</button>\n            <button className = \"-\" onClick={this.props.handleClick}>-</button>\n          </p>\n          <p>\n            <button className = \"1\" onClick={this.props.handleClick}>1</button>\n            <button className = \"2\" onClick={this.props.handleClick}>2</button>\n            <button className = \"3\" onClick={this.props.handleClick}>3</button>\n            <button className = \"+\" onClick={this.props.handleClick}>+</button>\n          </p>\n          <p>\n            <button className = \"placeholder\">pl</button>\n            <button className = \"0\" onClick={this.props.handleClick}>0</button>\n            <button className = \"placeholder\">pl</button>\n            <button className = \"equals\" onClick={this.props.handleClick}>=</button>\n          </p>\n          </div>\n    </div>\n    );\n  }\n}\nclass MathHandler extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      displayValue: \"\",\n      funcValue: 0,\n\n    }\n    this.handleClick = this.handleClick.bind(this);\n    this.Clear = this.Clear.bind(this);\n    this.Equal = this.Equals.bind(this);\n  }\n  Addition(props){\n    \n  }\n  Subtraction(props){\n    \n  }\n  Multiplication(props){\n    \n  }\n  Division(props){\n    \n  }\n  Equals(){\n    if(this.state.displayValue.indexOf(\"+\") !== -1){\n      var interValue = this.state.displayValue.split(\"+\")\n      this.setState({\n        displayValue:(parseInt(interValue[0]) + parseInt(interValue[1])),\n      })   \n    } else if(this.state.displayValue.indexOf(\"*\") !== -1){\n      interValue = this.state.displayValue.split(\"*\")\n      this.setState({\n        displayValue:(parseInt(interValue[0]) * parseInt(interValue[1])),\n      })\n    } else if(this.state.displayValue.indexOf(\"-\") !== -1){\n      interValue = this.state.displayValue.split(\"-\")\n      this.setState({\n        displayValue:(parseInt(interValue[0]) - parseInt(interValue[1])),\n      }) \n    } else if(this.state.displayValue.indexOf(\"/\") !== -1){\n      interValue = this.state.displayValue.split(\"/\")\n      this.setState({\n        displayValue:(parseInt(interValue[0]) / parseInt(interValue[1])),\n      })\n    }\n  }\n  Clear(){\n    this.setState({\n      displayValue:\"\",\n    })\n  }\n  handleClick(event) {\n    if(this.state.displayValue.length > 18){\n      return \"\";\n    }else if(event.target.classList[0] === \"equals\"){\n      this.Equals()\n    } else {\n      this.setState({\n        displayValue:this.state.displayValue + event.target.classList[0],\n      })\n    }\n  }\n  render(){\n    return(\n      <Calculator \n            display = {this.state.displayValue}\n            handleClick = {this.handleClick}\n            Clear = {this.Clear}\n            Equal = {this.Equals}\n            />\n    );\n  }\n}\nexport default MathHandler;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport MathHandler from './Calculator';\n//import Calculator from './Calculator';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n        <MathHandler/>,\n     document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}